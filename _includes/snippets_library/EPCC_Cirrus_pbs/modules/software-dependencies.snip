To demonstrate, let's load the `gromacs` module and then use the `module list`
command to show which modules we currently have loaded in our environment.
([Gromacs](https://gromacs.org) is an open source molecular dynamics package.)

```
{{ site.remote.prompt }} module load gromacs
{{ site.remote.prompt }} module list
```
{: .language-bash}

```
Currently Loaded Modulefiles:
 1) git/2.37.3   2) epcc/utils   3) /mnt/lustre/indy2lfs/sw/modulefiles/epcc/setup-env   4) gcc/8.2.0(default)   5) mpt/2.25   6) gromacs/2022.1(default) 
```
{: .output}

So in this case, loading the `gromacs` module also loaded a variety of other
modules. Let's try unloading the `gromacs` package.

```
{{ site.remote.prompt }} module unload gromacs
{{ site.remote.prompt }} module list
```
{: .language-bash}

```
Currently Loaded Modulefiles:
 1) git/2.37.3   2) epcc/utils   3) /mnt/lustre/indy2lfs/sw/modulefiles/epcc/setup-env
```
{: .output}

So using `module unload` "un-loads" a module along with its dependencies. 
